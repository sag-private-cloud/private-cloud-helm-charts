apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microservices-runtime.fullname" . }}
  labels:
    {{- include "microservices-runtime.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "microservices-runtime.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "microservices-runtime.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "microservices-runtime.serviceAccountName" . }}
      {{ if .Values.mysql.enabled }}
      initContainers:
            - name: init-cont
              image: busybox:1.31
              command: [ 'sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z microservices-runtime-storage 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";' ]
      {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:

            - name: "password"
              valueFrom:
                secretKeyRef:
                  {{ if .Values.adminSecretName }}
                  name: {{ .Values.adminSecretName }}
                  {{ else }}
                  name: {{ include "microservices-runtime.fullname" . }}-secret
                  {{ end }}
                  key: admin_password
            {{ if .Values.mysql.enabled }}
            - name: "MSR_JDBC_URL"
              value: "jdbc:mysql://microservices-runtime-storage:3306/scratch"
            - name: "MSR_JDBC_USER"
              value: "scratch"
            - name: "MSR_JDBC_PASSWORD"
              valueFrom:
                secretKeyRef:
                  {{ if .Values.mysql.adminSecretName }}
                  name: {{ .Values.mysql.adminSecretName }}
                  {{ else }}
                  name: {{ include "microservices-runtime.fullname" . }}-db-secret
                  {{ end }}
                  key: db_password
              {{ end }}
          ports:
            - name: http
              containerPort: 5555
              protocol: TCP
          volumeMounts:
            - name: properties
              mountPath: /opt/softwareag/IntegrationServer/application.properties
              subPath: application.properties
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command: [ '/bin/sh','-c' ]
          args:
             - /opt/softwareag/IntegrationServer/bin/startContainer.sh
      volumes:
          - name: properties
            configMap:
              name: {{ include "microservices-runtime.fullname" . }}-properties-config-map
              items:
                - key: application-properties
                  path: application.properties
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
