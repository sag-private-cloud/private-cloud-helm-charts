{{ if .Values.mysql.enabled }}
{{ $secretName := printf "%s-%s" (include "microservices-runtime.fullname" .) "db-secret" }}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ $secretName }}"
  annotations:
    {{ if .Values.mysql.keepsecretondelete }}
    "helm.sh/resource-policy": "keep"
    {{ end }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
  # {{ $secretObj | toJson }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # {{ (get $secretData "my-secret") | toJson }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $newdbrootpass := (get $secretData "db_root_password") | default (randAlphaNum 16 | b64enc) }}
  db_root_password: {{ $newdbrootpass | quote }}
  {{- $newdbpass := (get $secretData "db_password") | default (randAlphaNum 16 | b64enc) }}
  db_password: {{ $newdbpass | quote }}
{{ end }}