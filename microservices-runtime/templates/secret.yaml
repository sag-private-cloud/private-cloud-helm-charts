
{{ $secretName := printf "%s-%s" (include "microservices-runtime.fullname" .) "secret" }}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ $secretName }}"
  annotations:
    {{ if .Values.keepsecretondelete }}
    "helm.sh/resource-policy": "keep"
    {{ end }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
  # {{ $secretObj | toJson }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # {{ (get $secretData "my-secret") | toJson }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $newpass := (get $secretData "admin_password") | default (randAlphaNum 16 | b64enc) }}
  admin_password: {{ $newpass | quote }}
